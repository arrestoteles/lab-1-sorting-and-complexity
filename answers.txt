/******************************************************************************
** Lab 1: Sorting, Complexity
******************************************************************************/

Group members:
- Victor Campanello
- Shariq Shahbaz
- Armin Balesic

/******************************************************************************
** Task: Figuring out the asymptotic complexity
**
** 1. What is the complexity of running each of the following algorithms
**    on each of the following kinds of inputs?
******************************************************************************/

Insertion.java on:

- random inputs:      [Quadratic]
- 95% sorted inputs:  [Quadratic]
- sorted inputs:      [Linear]

Quick.java on:

- random inputs:      [Linearithmic]
- 95% sorted inputs:  [Linearithmic]
- sorted inputs:      [Quadratic]

Merge.java on:

- random inputs:      [Linearithmic]
- 95% sorted inputs:  [Linearithmic]
- sorted inputs:      [Linearithmic]

/******************************************************************************
** Task: Improving quicksort
**
** 2. Do the following changes affect the asymptotic complexity of quicksort
**    on any of the three degrees of sortedness of the input?
**    If so, what is it that changes?
******************************************************************************/

Shuffling the array first:
Yes, the complexity became linearithmic for all three degrees of sortedness.

Median-of-three pivot selection:
Yes, the complexity became linearithmic for all three degrees of sortedness.

Insertion sort for small subarrays:
No, there is a positive effect for the random, however, the asymptotic complexity is unchanged.

/******************************************************************************
** 3. What is a good cutoff to use for insertion sort?
**    Explain briefly how you came to this answer.
**    Remember that you should try to find the answer in a systematic way.
******************************************************************************/

A cutoff value of 16 works well. Using the tried and true approach of trial and error, we looped through a wide range of cut of points from 0-50.
Then we narrowed our search further and came to the conclusion that a cutoff value of 16 works the best on our systems.

/******************************************************************************
** 4. Which combination of improvements gives the best performance?
******************************************************************************/
We found that using Median of Three in combination with Insertion Sort worked best for all kinds of arrays, but especially for sorted arrays

/******************************************************************************
** Appendix: General information
**
** A. Approximately how many hours did you spend on the assignment?
******************************************************************************/

[Victor Campanello]:  [7]
[Armin Balesic]:  [7]
[Shariq Shahbaz]:  [7]


/******************************************************************************
** B. Are there any known bugs / limitations?
******************************************************************************/

We were a little limited due to a gap in our knowledge of the implementations of the algorithms in code.

/******************************************************************************
** C. Did you collaborate with any other students on this lab?
**    If so, please write in what way you collaborated and with whom.
**    Also include any resources (including the web) that you may
**    may have used in creating your design.
******************************************************************************/
No.

/******************************************************************************
** D. Describe any serious problems you encountered.                    
******************************************************************************/
Took a while to understand all the code, which made it take a while before
we felt confident in writing code of the tasks.

/******************************************************************************
** E. List any other comments here.
**    Feel free to provide any feedback on how much you learned 
**    from doing the assignment, and whether you enjoyed it.                                             
******************************************************************************/
Perhaps a little introduction to the code would have been useful, and some clarity in what parts we should/should not change would definitely help.
